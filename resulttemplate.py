# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'resulttemplate.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from reportformat import Ui_reportForm
import sqlite3
import os
from editreporttemplate import Ui_editreportForm
from PyQt5.QtCore import QTime, QTimer
from PyQt5.QtWidgets import QTableWidget,QTableWidgetItem
from PyQt5.QtWidgets import QMessageBox

class Ui_resulttemplateForm(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(832, 637)
        Form.showMaximized() 
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setEnabled(True)
        self.label.setMinimumSize(QtCore.QSize(5, 50))
        self.label.setMaximumSize(QtCore.QSize(16777215, 30))
        self.label.setSizeIncrement(QtCore.QSize(3, 3))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("color: #181C32;\n"
"margin-top:10px;")
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem, 3, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(-1, 50, -1, 30)
        self.gridLayout.setHorizontalSpacing(23)
        self.gridLayout.setVerticalSpacing(9)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_25 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_25.setMinimumSize(QtCore.QSize(200, 35))
        self.lineEdit_25.setMaximumSize(QtCore.QSize(250, 16777215))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_25.setFont(font)
        self.lineEdit_25.setStyleSheet("QLineEdit\n"
"{\n"
"font-size: 15px;\n"
"    font-weight: 400;\n"
"    color: #212529;\n"
"    background-color: #ffffff;\n"
"    background-clip: padding-box;\n"
"    border: 1px solid #ced4da;\n"
"    border-radius: 20px;\n"
"    padding:0px 10px;\n"
"}\n"
"QLineEdit:focus\n"
"{\n"
"border:1px solid #3F4254;\n"
"}\n"
"\n"
"")
        self.lineEdit_25.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit_25.setFrame(True)
        self.lineEdit_25.setObjectName("lineEdit_25")
        self.gridLayout.addWidget(self.lineEdit_25, 1, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setMinimumSize(QtCore.QSize(150, 35))
        self.pushButton_5.setMaximumSize(QtCore.QSize(165, 16777215))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(62)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("QPushButton\n"
"{\n"
"    background-color: #0DBCC0;\n"
"    border: 0;\n"
"    font-size: 14px;\n"
"    font-weight: 500;\n"
"    border-radius: 4px;\n"
"color: #ffffff;\n"
"border: 0;\n"
"}\n"
"\n"
"QPushButton:hover\n"
"{\n"
"background-color: #089598;\n"
"}\n"
"\n"
"")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 1, 3, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setMinimumSize(QtCore.QSize(150, 35))
        self.pushButton_4.setMaximumSize(QtCore.QSize(165, 16777215))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(62)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("QPushButton\n"
"{\n"
"    background-color: #0DBCC0;\n"
"    border: 0;\n"
"    font-size: 14px;\n"
"    font-weight: 500;\n"
"    border-radius: 4px;\n"
"color: #ffffff;\n"
"border: 0;\n"
"}\n"
"\n"
"QPushButton:hover\n"
"{\n"
"background-color: #089598;\n"
"}\n"
"\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 1, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setMinimumSize(QtCore.QSize(0, 25))
        self.label_5.setMaximumSize(QtCore.QSize(16777215, 10))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(8)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: #5E6278;")
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMinimumSize(QtCore.QSize(0, 25))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 10))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(8)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: #5E6278;")
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 1, 1, 1)
        self.lineEdit_26 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_26.setMinimumSize(QtCore.QSize(200, 35))
        self.lineEdit_26.setMaximumSize(QtCore.QSize(250, 16777215))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_26.setFont(font)
        self.lineEdit_26.setStyleSheet("QLineEdit\n"
"{\n"
"font-size: 15px;\n"
"    font-weight: 400;\n"
"    color: #212529;\n"
"    background-color: #ffffff;\n"
"    background-clip: padding-box;\n"
"    border: 1px solid #ced4da;\n"
"    border-radius: 20px;\n"
"    padding:0px 10px;\n"
"}\n"
"QLineEdit:focus\n"
"{\n"
"border:1px solid #3F4254;\n"
"}\n"
"\n"
"")
        self.lineEdit_26.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit_26.setFrame(True)
        self.lineEdit_26.setObjectName("lineEdit_26")
        self.gridLayout.addWidget(self.lineEdit_26, 1, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 4, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 2, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tableWidget = QtWidgets.QTableWidget(self.frame)
        self.tableWidget.setMinimumSize(QtCore.QSize(0, 380))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.gridLayout_3.addLayout(self.verticalLayout_2, 4, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.fetch_and_display_reportdata()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Result Template"))
        self.pushButton_5.setText(_translate("Form", "Add Result Template"))
        self.pushButton_4.setText(_translate("Form", "search"))
        self.label_5.setText(_translate("Form", "Code"))
        self.label_6.setText(_translate("Form", "Name"))
        self.pushButton_5.clicked.connect(self.addreport_form)
        self.pushButton_4.clicked.connect(self.filter_report_data)
    


    def fetch_and_display_reportdata(self):
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setColumnWidth(0,200)
        self.tableWidget.setColumnWidth(1,350)
        self.tableWidget.setColumnWidth(2,450)
        self.tableWidget.setColumnWidth(3,150)
   
        self.tableWidget.setHorizontalHeaderLabels(['Code','Name','Template','Actions'])
        #set header height
        vertical_header = self.tableWidget.verticalHeader()
        vertical_header.setDefaultSectionSize(40) 


        conn=sqlite3.connect('patient_data.db')
        cursor=conn.cursor()
        cursor.execute("SELECT code,name,content FROM reporttemplates")
        test_data = cursor.fetchall()
        count=len(test_data)
        
        self.tableWidget.setRowCount(count)
        r=0
        c=0
        for row in test_data:
            c=0
            for col in row:
                self.tableWidget.setItem(r,c,QTableWidgetItem("   "+str(col)))
                c=c+1
            # Create a container widget to hold the "Edit" and "Delete" buttons
            button_container = QtWidgets.QWidget()
            button_layout = QtWidgets.QHBoxLayout(button_container)

            delete_button = QtWidgets.QPushButton()
            delete_button.setIcon(QtGui.QIcon(os.path.join('images', 'delete.png')))
            delete_button.setFixedSize(20, 20)
            delete_button.clicked.connect(lambda _, reportcode=row[0]: self.delete_resulttemplatedata(reportcode))
            button_layout.addWidget(delete_button)

            edit_button = QtWidgets.QPushButton()
            edit_button.setIcon(QtGui.QIcon(os.path.join('images', 'edit.png')))  # Change to the correct icon
            edit_button.setFixedSize(20, 20)
            edit_button.clicked.connect(lambda _, reportcode=row[0]: self.edit_resulttemplate(reportcode))
            button_layout.addWidget(edit_button)

            button_layout.setContentsMargins(0, 0, 0, 0)
            button_layout.setAlignment(QtCore.Qt.AlignCenter)

            # Set the container widget as a cell widget in the last column
            self.tableWidget.setCellWidget(r, c, button_container)
            r=r+1
        conn.close()

    def filter_report_data(self):

        self.tableWidget.setColumnCount(4)
        self.tableWidget.setColumnWidth(0,200)
        self.tableWidget.setColumnWidth(1,350)
        self.tableWidget.setColumnWidth(2,450)
        self.tableWidget.setColumnWidth(3,150)
   
        self.tableWidget.setHorizontalHeaderLabels(['Code','Name','Template','Actions'])
        #set header height
        vertical_header = self.tableWidget.verticalHeader()
        vertical_header.setDefaultSectionSize(40) 
        # Connect to the database
        code=self.lineEdit_25.text()
        name=self.lineEdit_26.text()


        conn = sqlite3.connect('patient_data.db')
        cursor = conn.cursor()
        
        # Fetch reference data
        query="SELECT code,name,content FROM reporttemplates where "
        parameters = []
        
        if not code and not name:  # Both line edits are empty
           query = "SELECT code,name,content FROM reporttemplates"
        
        if code and name=='':
            query+='code like ?'
            parameters.append('%'+code+'%')
        
        elif code=='' and name:
            query+='name like ?'
            parameters.append('%'+name+'%')
        elif code and name:
            query +='code like ? and name like ?'
            parameters.extend(['%'+code+'%','%'+name+'%'])
        cursor.execute(query, parameters)
        report_data = cursor.fetchall()
        count=len(report_data)
        
        self.tableWidget.setRowCount(count)
        r=0
        c=0
        for row in report_data:
            c=0
            for col in row:
                self.tableWidget.setItem(r,c,QTableWidgetItem("   "+str(col)))
                c=c+1
            # Create a container widget to hold the "Edit" and "Delete" buttons
            button_container = QtWidgets.QWidget()
            button_layout = QtWidgets.QHBoxLayout(button_container)

            delete_button = QtWidgets.QPushButton()
            delete_button.setIcon(QtGui.QIcon(os.path.join('images', 'delete.png')))
            delete_button.setFixedSize(20, 20)
            delete_button.clicked.connect(lambda _, code=row[0]: self.delete_resulttemplatedata(code))
            button_layout.addWidget(delete_button)

            edit_button = QtWidgets.QPushButton()
            edit_button.setIcon(QtGui.QIcon(os.path.join('images', 'edit.png')))  # Change to the correct icon
            edit_button.setFixedSize(20, 20)
            edit_button.clicked.connect(lambda _, code=row[0]: self.edit_resulttemplate(code))
            button_layout.addWidget(edit_button)

            button_layout.setContentsMargins(0, 0, 0, 0)
            button_layout.setAlignment(QtCore.Qt.AlignCenter)

            # Set the container widget as a cell widget in the last column
            self.tableWidget.setCellWidget(r, c, button_container)
            r=r+1
        conn.close()



    def delete_resulttemplatedata(self, reportcode):
      confirm_dialog = QMessageBox()
      confirm_dialog.setIcon(QMessageBox.Question)
      confirm_dialog.setText("Are you sure you want to delete this template?")
      confirm_dialog.setWindowTitle("Confirm Deletion")
      confirm_dialog.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
  
      # Show the dialog and wait for the user's response
      response = confirm_dialog.exec_()
  
      # If the user confirms deletion, proceed with deletion
      if response == QMessageBox.Yes:
       # Connect to the database
       conn = sqlite3.connect('patient_data.db')
       cursor = conn.cursor()

       # Delete patient data from the database
       cursor.execute("DELETE FROM reporttemplates WHERE code = ?", (reportcode,))
       conn.commit()
      # self.tableWidget.clear()
       # Refresh the displayed patient data immediately after deletion
       self.fetch_and_display_reportdata()


    def addreport_form(self):
        self.add_report_form = QtWidgets.QWidget()
        self.ui_addreport = Ui_reportForm()
        self.ui_addreport.setupUi(self.add_report_form)
        self.add_report_form.show()
        self.ui_addreport.pushButton_2.clicked.connect(self.fetch_and_display_reportdata)

    

    def edit_resulttemplate(self,code):
        self.edit_report_form = QtWidgets.QWidget()
        self.ui_edit_report = Ui_editreportForm() # Replace with the correct class name
        self.ui_edit_report.setupUi(self.edit_report_form,code)  # Pass the DoctorCode argument
        self.edit_report_form.show()

        # Fetch refdr data for the specified DoctorCode
        # refdr_data = self.fetch_refdr_data_by_id(DoctorCode)
        # if refdr_data:
        #     self.edit_refdr_form.refdr_data = refdr_data  
        
       # self.edit_refdr_form.show()
        
        self.ui_edit_report.pushButton_2.clicked.connect(self.fetch_and_display_reportdata)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_resulttemplateForm()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
